import express from "express";
import { v4 as uuidv4 } from "uuid";
import { readFile, writeFile } from "node:fs/promises";
import { existsSync, readdirSync, unlink } from "node:fs";

// existsSync: used to see if any file exists or not. It returns a boolean: true/false
// Usage: existsSync("./data/items.json");

// readdirSync: used to synchronously read the contents of a given directory.
// Usage: readdirSync("./data/");

// unlink: used to remove a file or symbolic link from the filesystem..
// Usage:
// Callback example: unlink( path, callback )
// Promise example: await unlink( path )
// unlink("./data/items.json", (err) => {if (err) throw err; res.status(200).json("Done")});

// This function was written to change the IDs of the existing products in
// ./data/products.json file. Initially all products had IDs as of 1,2,3...,
// now they're changed to IDs generated by uuidv4
// import { changeData } from "./changeData.js";
// Usage:
// await changeData();

// This line creates an instance of the Express application. express() is a
// function exported by the Express module, and calling it returns a new
// instance of an Express application. The app variable is then used to
// configure routes, middleware, and other settings for your web application.
const app = express();

// This line defines a variable named port that will be used to determine the
// port on which your server will listen. It uses the logical OR (||) operator
// to check if the environment variable PORT is set. If it is set, it uses that
// value; otherwise, it defaults to 3000.
const port = process.env.PORT || 3001;

// Middleware to parse incoming requests with JSON payloads
// When a request is made with a Content-Type of application/json, this middleware
// parses the request body and makes the parsed JSON data available on req.body.
app.use(express.json());

// Endpoint to home path and see the local files under ./data
app.get("/", async (req, res) => {
  const files = readdirSync("./data/");
  res
    .status(200)
    .json({ message: "Success. Home path works!", data_files: files });
});

// Endpoint to delete specific file path under ./data folder
app.delete("/:file_name", async (req, res) => {
  const { file_name } = req.params;

  if (existsSync(`./data/${file_name}.json`)) {
    unlink(`data/${file_name}.json`, (err) => {
      if (err) throw err;
      res
        .status(200)
        .json({ message: `data/${file_name}.json was deleted successfully.` });
    });
  } else {
    res.status(404).json({ error: `${file_name}.json filename is not found.` });
  }
});

// Endpoint to get a single item by ID
// app.get("/:file_name/:id", async (req, res) => {
app.get("/:file_name/:id", async (req, res) => {
  const { id: itemId, file_name } = req.params;

  try {
    // Read existing items from the file
    // const data = await readFile(`./data/${file_name}.json`, {
    const data = await readFile(`./data/${file_name}.json`, {
      encoding: "utf8",
    });

    let items = JSON.parse(data);

    // OPTION 1
    // Find the index of the item with the specified ID
    // const index = items.findIndex((item) => item.id === itemId);

    // // If the item is found, remove it from the array
    // if (index !== -1) {
    //   // Send back the found item
    //   res.status(200).json({ message: "Item has been found successfully.", item: items[index] });
    // } else {
    //   res.status(404).json({ error: "Item not found" });
    // }

    // OPTION 2
    // Find the item with the specified ID
    const singleItem = items.find((item) => item.id === itemId);

    // If the item is found, remove it from the array
    if (singleItem) {
      // Send back the found item
      res.status(200).json(singleItem);
    } else {
      res.status(404).json({ error: "Item not found." });
    }
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error." });
  }
});

// Endpoint to get all items based on the file_name provided
app.get("/:file_name", async (req, res) => {
  const { file_name } = req.params;

  if (existsSync(`./data/${file_name}.json`)) {
    try {
      // Read items from a local file (assuming it contains a JSON array)
      const data = await readFile(`./data/${file_name}.json`, {
        encoding: "utf8",
      });

      const items = JSON.parse(data);
      res.status(200).json(items);
    } catch (error) {
      res.status(500).json({ error: "Internal Server Error" });
    }
  } else {
    await writeFile(`./data/${file_name}.json`, JSON.stringify([]));
    res.status(404).json({
      error: `${file_name} was not found`,
      message: "Generating a new file now. Please refresh this page.",
    });
  }
});

// Endpoint to add a new item
app.post("/:file_name", async (req, res) => {
  const newItem = req.body;
  const file_name = req.params.file_name;

  //   Add id to the new item
  newItem.id = uuidv4();

  try {
    // Read existing items from the file
    const data = await readFile(`./data/${file_name}.json`, {
      encoding: "utf8",
    });

    const items = JSON.parse(data);

    // Add the new item
    items.push(newItem);

    // Write the updated items back to the file
    await writeFile(`./data/${file_name}.json`, JSON.stringify(items));

    res.status(200).json(newItem);
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Endpoint to delete an item by ID
app.delete("/:file_name/:id", async (req, res) => {
  const { id: itemId, file_name } = req.params;

  try {
    // Read existing items from the file
    const data = await readFile(`./data/${file_name}.json`, {
      encoding: "utf8",
    });
    let items = JSON.parse(data);

    // Find the index of the item with the specified ID
    const index = items.findIndex((item) => item.id === itemId);

    // If the item is found, remove it from the array
    if (index !== -1) {
      items.splice(index, 1);

      // Write the updated items back to the file
      await writeFile(`./data/${file_name}.json`, JSON.stringify(items));
      res.status(200).json({ message: "Item has been deleted successfully." });
    } else {
      res.status(404).json({ error: "Item not found" });
    }
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Endpoint to update (patch) an item by ID
app.patch("/:file_name/:id", async (req, res) => {
  const { id: itemId, file_name } = req.params;
  const updatedData = req.body;

  try {
    // Read existing items from the file
    const data = await readFile(`./data/${file_name}.json`, {
      encoding: "utf8",
    });
    let items = JSON.parse(data);

    // Find the index of the item with the specified ID
    const index = items.findIndex((item) => item.id === itemId);

    // If the item is found, update it with the new data
    if (index !== -1) {
      items[index] = { ...items[index], ...updatedData };

      // Write the updated items back to the file
      await writeFile(`./data/${file_name}.json`, JSON.stringify(items));
      res.json(items[index]);
    } else {
      res.status(404).json({ error: "Item not found" });
    }
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
