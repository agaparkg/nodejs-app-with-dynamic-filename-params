import express from "express";
import { v4 as uuidv4 } from "uuid";
import { readFile, writeFile } from "node:fs/promises";
import { changeData } from "./changeData.js";

const app = express();
const port = process.env.PORT || 3000;

// Middleware to parse JSON requests
app.use(express.json());

// Endpoint to home path
app.get("/", async (req, res) => {
  //   await changeData(); --> this function was ran to change the IDs for the products
  // Initially they had IDs as of 1,2,3..., now they're changed to IDs generated by uuidv4
  res.status(200).send("Hello World");
});

// Endpoint to get a single item by ID
app.get("/products/:id", async (req, res) => {
  const itemId = req.params.id;

  try {
    // Read existing items from the file
    const data = await readFile("./data/products.json", {
      encoding: "utf8",
    });

    let items = JSON.parse(data);

    // OPTION 1
    // Find the index of the item with the specified ID
    // const index = items.findIndex((item) => item.id === itemId);

    // // If the item is found, remove it from the array
    // if (index !== -1) {
    //   // Send back the found item
    //   res.status(200).json({ message: "Item has been found successfully.", item: items[index] });
    // } else {
    //   res.status(404).json({ error: "Item not found" });
    // }

    // OPTION 2
    // Find the item with the specified ID
    const singleItem = items.find((item) => item.id === itemId);

    // If the item is found, remove it from the array
    if (singleItem) {
      // Send back the found item
      res.status(200).json(singleItem);
    } else {
      res.status(404).json({ error: "Item not found" });
    }
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Endpoint to get all items
app.get("/products", async (req, res) => {
  try {
    // Read items from a local file (assuming it contains a JSON array)
    const data = await readFile("./data/products.json", {
      encoding: "utf8",
    });

    const items = JSON.parse(data);
    res.status(200).json(items);
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Endpoint to add a new item
app.post("/products", async (req, res) => {
  const newItem = req.body;

  //   Add id to the new item
  newItem.id = uuidv4();

  try {
    // Read existing items from the file
    const data = await readFile("./data/products.json", {
      encoding: "utf8",
    });

    const items = JSON.parse(data);

    // Add the new item
    items.push(newItem);

    // Write the updated items back to the file
    await writeFile("./data/products.json", JSON.stringify(items));

    res.status(200).json(newItem);
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Endpoint to delete an item by ID
app.delete("/products/:id", async (req, res) => {
  const itemId = req.params.id;

  try {
    // Read existing items from the file
    const data = await readFile("./data/products.json", {
      encoding: "utf8",
    });
    let items = JSON.parse(data);

    // Find the index of the item with the specified ID
    const index = items.findIndex((item) => item.id === itemId);

    // If the item is found, remove it from the array
    if (index !== -1) {
      items.splice(index, 1);

      // Write the updated items back to the file
      await writeFile("./data/products.json", JSON.stringify(items));
      res.status(200).json({ message: "Item has been deleted successfully." });
    } else {
      res.status(404).json({ error: "Item not found" });
    }
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Endpoint to update (patch) an item by ID
app.patch("/products/:id", async (req, res) => {
  const itemId = req.params.id;
  const updatedData = req.body;

  try {
    // Read existing items from the file
    const data = await readFile("./data/products.json", {
      encoding: "utf8",
    });
    let items = JSON.parse(data);

    // Find the index of the item with the specified ID
    const index = items.findIndex((item) => item.id === itemId);

    // If the item is found, update it with the new data
    if (index !== -1) {
      items[index] = { ...items[index], ...updatedData };

      // Write the updated items back to the file
      await writeFile("./data/products.json", JSON.stringify(items));
      res.json(items[index]);
    } else {
      res.status(404).json({ error: "Item not found" });
    }
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
